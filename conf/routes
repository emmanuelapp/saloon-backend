# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Web site
GET       /                                               controllers.Application.home
GET       /sample                                         controllers.Application.sample

GET       /events                                         controllers.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /events/create                                  controllers.Events.create
POST      /events                                         controllers.Events.doCreate
GET       /events/:eventId                                controllers.Events.details(eventId: String)
GET       /events/:eventId/edit                           controllers.Events.update(eventId: String)
POST      /events/:eventId                                controllers.Events.doUpdate(eventId: String)
POST      /events/:eventId/delete                         controllers.Events.delete(eventId: String)

GET       /events/:eventId/exponents                      controllers.Exponents.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /events/:eventId/exponents/create               controllers.Exponents.create(eventId: String)
POST      /events/:eventId/exponents                      controllers.Exponents.doCreate(eventId: String)
GET       /events/:eventId/exponents/:sessionId           controllers.Exponents.details(eventId: String, sessionId: String)
GET       /events/:eventId/exponents/:sessionId/edit      controllers.Exponents.update(eventId: String, sessionId: String)
POST      /events/:eventId/exponents/:sessionId           controllers.Exponents.doUpdate(eventId: String, sessionId: String)
POST      /events/:eventId/exponents/:sessionId/delete    controllers.Exponents.delete(eventId: String, sessionId: String)

GET       /events/:eventId/sessions                       controllers.Sessions.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /events/:eventId/sessions/create                controllers.Sessions.create(eventId: String)
POST      /events/:eventId/sessions                       controllers.Sessions.doCreate(eventId: String)
GET       /events/:eventId/sessions/:exponentId           controllers.Sessions.details(eventId: String, exponentId: String)
GET       /events/:eventId/sessions/:exponentId/edit      controllers.Sessions.update(eventId: String, exponentId: String)
POST      /events/:eventId/sessions/:exponentId           controllers.Sessions.doUpdate(eventId: String, exponentId: String)
POST      /events/:eventId/sessions/:exponentId/delete    controllers.Sessions.delete(eventId: String, exponentId: String)

# Api
GET       /api/v1/users/find                              controllers.api.Users.find(deviceId: String)
POST      /api/v1/users                                   controllers.api.Users.create
GET       /api/v1/users/:userId                           controllers.api.Users.details(userId: String)

GET       /api/v1/events                                  controllers.api.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/all                              controllers.api.Events.listAll(query: Option[String] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/:eventId                         controllers.api.Events.details(eventId: String)
GET       /api/v1/events/:eventId/full                    controllers.api.Events.detailsFull(eventId: String)

GET       /api/v1/events/:eventId/sessions                controllers.api.Sessions.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/:eventId/sessions/all            controllers.api.Sessions.listAll(eventId: String)
GET       /api/v1/events/:eventId/sessions/:sessionId     controllers.api.Sessions.details(eventId: String, sessionId: String)

GET       /api/v1/events/:eventId/exponents               controllers.api.Exponents.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/:eventId/exponents/all           controllers.api.Exponents.listAll(eventId: String)
GET       /api/v1/events/:eventId/exponents/:exponentId   controllers.api.Exponents.details(eventId: String, exponentId: String)

# GET    	/api/v1/events/:eventId/sessions/favs						get sessions but only with fav data
# GET   	/api/v1/events/:eventId/sessions/:sessionId/favs			users who favorite this session
# POST   	/api/v1/events/:eventId/sessions/:sessionId/favs?userId		favorite a session
# DELETE	/api/v1/events/:eventId/sessions/:sessionId/favs?userId		unfavorite a session

# Allow cross-origin for API
OPTIONS   /api/v1/*all                                    controllers.Application.corsPreflight(all: String)

# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                   controllers.Assets.at(path="/public", file)
