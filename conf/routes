# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Web site
GET       /                                                                                 website.controllers.Application.index
GET       /sample                                                                           website.controllers.Application.sample

#GET       /index                                                                            authentication.controllers.Auth.index
GET       /login                                                                            authentication.controllers.Auth.login
GET       /register                                                                         authentication.controllers.Auth.register
GET       /logout                                                                           authentication.controllers.Auth.logout
POST      /login                                                                            authentication.controllers.Auth.doLogin
POST      /register                                                                         authentication.controllers.Auth.doRegister

GET       /backend                                                                          backend.controllers.Application.index
GET       /backend/sample                                                                   backend.controllers.Sample.index
GET       /backend/sample/:pageName                                                         backend.controllers.Sample.page(pageName: String)

GET       /admin                                                                            admin.controllers.Application.index
GET       /admin/sample                                                                     admin.controllers.Application.sample
GET       /admin/migrate                                                                    admin.controllers.Application.migrate

GET       /admin/events                                                                     admin.controllers.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/create                                                              admin.controllers.Events.create
POST      /admin/events                                                                     admin.controllers.Events.doCreate
POST      /admin/events/fromUrl                                                             admin.controllers.Events.doCreateFromUrl
GET       /admin/events/:eventId                                                            admin.controllers.Events.details(eventId: String)
GET       /admin/events/:eventId/operations                                                 admin.controllers.Events.operations(eventId: String)
POST      /admin/events/:eventId/urlImport                                                  admin.controllers.Events.urlImport(eventId: String)
POST      /admin/events/:eventId/stats                                                      admin.controllers.Events.stats(eventId: String)
GET       /admin/events/:eventId/edit                                                       admin.controllers.Events.update(eventId: String)
POST      /admin/events/:eventId                                                            admin.controllers.Events.doUpdate(eventId: String)
GET       /admin/events/:eventId/refresh                                                    admin.controllers.Events.refresh(eventId: String)
POST      /admin/events/:eventId/refresh                                                    admin.controllers.Events.doRefresh(eventId: String)
POST      /admin/events/:eventId/delete                                                     admin.controllers.Events.delete(eventId: String)
GET       /admin/events/:eventId/reports                                                    admin.controllers.Events.reportsPreview(eventId: String)
GET       /admin/events/:eventId/reports/:userId                                            admin.controllers.Events.report(eventId: String, userId: String)
POST      /admin/events/:eventId/reports                                                    admin.controllers.Events.sendReports(eventId: String)
POST      /admin/events/:eventId/reports/:userId                                            admin.controllers.Events.sendReport(eventId: String, userId: String)

GET       /admin/events/:eventId/attendees                                                  admin.controllers.Attendees.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/:eventId/attendees/create                                           admin.controllers.Attendees.create(eventId: String)
POST      /admin/events/:eventId/attendees                                                  admin.controllers.Attendees.doCreate(eventId: String)
POST      /admin/events/:eventId/attendees/fileImport                                       admin.controllers.Attendees.fileImport(eventId: String)
POST      /admin/events/:eventId/attendees/fileExport                                       admin.controllers.Attendees.fileExport(eventId: String)
GET       /admin/events/:eventId/attendees/:attendeeId                                      admin.controllers.Attendees.details(eventId: String, attendeeId: String)
GET       /admin/events/:eventId/attendees/:attendeeId/edit                                 admin.controllers.Attendees.update(eventId: String, attendeeId: String)
POST      /admin/events/:eventId/attendees/:attendeeId                                      admin.controllers.Attendees.doUpdate(eventId: String, attendeeId: String)
POST      /admin/events/:eventId/attendees/:attendeeId/delete                               admin.controllers.Attendees.delete(eventId: String, attendeeId: String)

GET       /admin/events/:eventId/sessions                                                   admin.controllers.Sessions.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/:eventId/sessions/create                                            admin.controllers.Sessions.create(eventId: String)
POST      /admin/events/:eventId/sessions                                                   admin.controllers.Sessions.doCreate(eventId: String)
POST      /admin/events/:eventId/sessions/fileImport                                        admin.controllers.Sessions.fileImport(eventId: String)
POST      /admin/events/:eventId/sessions/fileExport                                        admin.controllers.Sessions.fileExport(eventId: String)
GET       /admin/events/:eventId/sessions/:exponentId                                       admin.controllers.Sessions.details(eventId: String, exponentId: String)
GET       /admin/events/:eventId/sessions/:exponentId/edit                                  admin.controllers.Sessions.update(eventId: String, exponentId: String)
POST      /admin/events/:eventId/sessions/:exponentId                                       admin.controllers.Sessions.doUpdate(eventId: String, exponentId: String)
POST      /admin/events/:eventId/sessions/:exponentId/delete                                admin.controllers.Sessions.delete(eventId: String, exponentId: String)

GET       /admin/events/:eventId/exponents                                                  admin.controllers.Exponents.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/:eventId/exponents/create                                           admin.controllers.Exponents.create(eventId: String)
POST      /admin/events/:eventId/exponents                                                  admin.controllers.Exponents.doCreate(eventId: String)
POST      /admin/events/:eventId/exponents/fileImport                                       admin.controllers.Exponents.fileImport(eventId: String)
POST      /admin/events/:eventId/exponents/fileExport                                       admin.controllers.Exponents.fileExport(eventId: String)
GET       /admin/events/:eventId/exponents/:sessionId                                       admin.controllers.Exponents.details(eventId: String, sessionId: String)
GET       /admin/events/:eventId/exponents/:sessionId/edit                                  admin.controllers.Exponents.update(eventId: String, sessionId: String)
POST      /admin/events/:eventId/exponents/:sessionId                                       admin.controllers.Exponents.doUpdate(eventId: String, sessionId: String)
POST      /admin/events/:eventId/exponents/:sessionId/delete                                admin.controllers.Exponents.delete(eventId: String, sessionId: String)

GET       /admin/devices                                                                    admin.controllers.Devices.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/devices/create                                                             admin.controllers.Devices.create
POST      /admin/devices                                                                    admin.controllers.Devices.doCreate
GET       /admin/devices/:deviceId                                                          admin.controllers.Devices.details(deviceId: String)
GET       /admin/devices/:deviceId/edit                                                     admin.controllers.Devices.update(deviceId: String)
POST      /admin/devices/:deviceId                                                          admin.controllers.Devices.doUpdate(deviceId: String)
POST      /admin/devices/:deviceId/delete                                                   admin.controllers.Devices.delete(deviceId: String)
POST      /admin/devices/:deviceId/actions/:itemType/:itemId/:actionType/:actionId/delete   admin.controllers.Devices.deleteAction(deviceId: String, itemType: String, itemId: String, actionType: String, actionId: String)

GET       /admin/crashs                                                                     admin.controllers.Crashs.list
GET       /admin/crashs/:crashId                                                            admin.controllers.Crashs.details(crashId: String)
POST      /admin/crashs/:crashId/solved                                                     admin.controllers.Crashs.solved(crashId: String)

# Api
GET       /api/v1/users/find                                                                api.controllers.Devices.find(deviceId: String)
POST      /api/v1/users                                                                     api.controllers.Devices.create
GET       /api/v1/users/:userId                                                             api.controllers.Devices.details(userId: String)
GET       /api/v1/users/:userId/actions                                                     api.controllers.Devices.actions(userId: String)
GET       /api/v1/users/:userId/actions/:eventId                                            api.controllers.Devices.eventActions(userId: String, eventId: String)
POST      /api/v1/users/:userId/actions/:eventId/sync                                       api.controllers.UserActions.syncEventActions(userId: String, eventId: String)

GET       /api/:version/events                                                              api.controllers.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/all                                                          api.controllers.Events.listAll(query: Option[String] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/:eventId                                                     api.controllers.Events.details(eventId: String, version: String)
GET       /api/:version/events/:eventId/full                                                api.controllers.Events.detailsFull(eventId: String, version: String)
POST      /api/v1/events/:eventId/subscribe                                                 api.controllers.UserActions.subscribe(eventId: String)
DELETE    /api/v1/events/:eventId/subscribe                                                 api.controllers.UserActions.unsubscribe(eventId: String)

GET       /api/:version/events/:eventId/sessions                                            api.controllers.Sessions.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/:eventId/sessions/all                                        api.controllers.Sessions.listAll(eventId: String, version: String)
GET       /api/:version/events/:eventId/sessions/:sessionId                                 api.controllers.Sessions.details(eventId: String, sessionId: String, version: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/favorites                             api.controllers.UserActions.favorite(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/favorites                             api.controllers.UserActions.unfavorite(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/dones                                 api.controllers.UserActions.done(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/dones                                 api.controllers.UserActions.undone(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/mood                                  api.controllers.UserActions.mood(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/mood                                  api.controllers.UserActions.deleteMood(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/comments                              api.controllers.UserActions.createComment(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String)
PUT       /api/v1/events/:eventId/sessions/:sessionId/comments/:commentId                   api.controllers.UserActions.updateComment(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String, commentId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/comments/:commentId                   api.controllers.UserActions.deleteComment(eventId: String, itemType: String = common.models.event.Session.className, sessionId: String, commentId: String)

GET       /api/:version/events/:eventId/exponents                                           api.controllers.Exponents.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/:eventId/exponents/all                                       api.controllers.Exponents.listAll(eventId: String, version: String)
GET       /api/:version/events/:eventId/exponents/:exponentId                               api.controllers.Exponents.details(eventId: String, exponentId: String, version: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/favorites                           api.controllers.UserActions.favorite(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/favorites                           api.controllers.UserActions.unfavorite(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/dones                               api.controllers.UserActions.done(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/dones                               api.controllers.UserActions.undone(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/mood                                api.controllers.UserActions.mood(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/mood                                api.controllers.UserActions.deleteMood(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/comments                            api.controllers.UserActions.createComment(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String)
PUT       /api/v1/events/:eventId/exponents/:exponentId/comments/:commentId                 api.controllers.UserActions.updateComment(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String, commentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/comments/:commentId                 api.controllers.UserActions.deleteComment(eventId: String, itemType: String = common.models.event.Exponent.className, exponentId: String, commentId: String)

GET       /api/v1/tools/crashs                                                              api.controllers.Crashs.getAll()
POST      /api/v1/tools/crashs                                                              api.controllers.Crashs.receive()
POST      /api/v1/tools/crashs/batch                                                        api.controllers.Crashs.receiveBatch()
GET       /api/v1/tools/crashs/:crashId                                                     api.controllers.Crashs.get(crashId: String)
DELETE    /api/v1/tools/crashs/:crashId                                                     api.controllers.Crashs.delete(crashId: String)

# Tools (mainly scrapers), should be moved to a separate app
GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/formated                           tools.controllers.Voxxrin.getFullEventFormated(eventId: String)
GET       /api/v1/tools/scrapers/events/rivieradev/formated                                 tools.controllers.RivieraDev.getFullEventFormated()
GET       /api/v1/tools/scrapers/events/voxxrin                                             tools.controllers.Voxxrin.getEvents()
GET       /api/v1/tools/scrapers/events/voxxrin/:eventId                                    tools.controllers.Voxxrin.getEvent(eventId: String)
GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/full                               tools.controllers.Voxxrin.getFullEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/saveInDb                   tools.controllers.Voxxrin.saveEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/saveInDb/:saloonId         tools.controllers.Voxxrin.updateEvent(eventId: String, saloonId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/day/:dayId                 tools.controllers.Voxxrin.getEventDay(eventId: String, dayId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/speakers/:speakerId        tools.controllers.Voxxrin.getEventSpeaker(eventId: String, speakerId: String)
GET       /api/v1/tools/scrapers/events/rivieradev                                          tools.controllers.RivieraDev.loadRivieraDev()
GET       /api/v1/tools/scrapers/events/lanyrd/places/:place                                tools.controllers.Lanyrd.getPlaceEvents(place: String, page: Int ?= 1, maxPages: Int ?= 1)
GET       /api/v1/tools/scrapers/events/lanyrd/:year/:id                                    tools.controllers.Lanyrd.getEvent(year: String, id: String)
GET       /api/v1/tools/scrapers/events/foiresetsalons/details                              tools.controllers.FoiresEtSalons.getEvent(url: String)
GET       /api/v1/tools/scrapers/events/foiresetsalons/:page                                tools.controllers.FoiresEtSalons.getEvents(page: String, format: String ?= "csv")
GET       /api/v1/tools/scrapers/events/foiresetsalons/:page/full                           tools.controllers.FoiresEtSalons.getEventsFull(page: String, offset: Int ?= 0, size: Int ?= 5, format: String ?= "csv")
GET       /api/v1/tools/scrapers/events/innorobo/exhibitors                                 tools.controllers.Innorobo.getExibitors()
GET       /api/v1/tools/scrapers/events/innorobo/exhibitors/full                            tools.controllers.Innorobo.getFullExibitors(offset: Int ?= 0, limit: Int ?= 5, format: String ?= "json")
GET       /api/v1/tools/scrapers/events/innorobo/exhibitors/:exhibitorId                    tools.controllers.Innorobo.getExibitor(exhibitorId: String)
GET       /api/v1/tools/scrapers/metas                                                      tools.controllers.Scrapers.getMetas(url: String)

# Allow cross-origin for API
OPTIONS   /api/v1/*all                                                                      common.controllers.Application.corsPreflight(all: String)

# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                                                     controllers.Assets.at(path="/public", file)
