# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Web site
GET       /                                                                       controllers.Application.home
GET       /sample                                                                 controllers.Application.sample
GET       /migrate                                                                controllers.Application.migrate

GET       /events                                                                 controllers.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /events/create                                                          controllers.Events.create
POST      /events                                                                 controllers.Events.doCreate
GET       /events/operations                                                      controllers.Events.operations
POST      /events/fileImport                                                      controllers.Events.fileImport
POST      /events/urlImport                                                       controllers.Events.urlImport
POST      /events/fileExport                                                      controllers.Events.fileExport
GET       /events/:eventId                                                        controllers.Events.details(eventId: String)
POST      /events/:eventId/stats                                                  controllers.Events.stats(eventId: String)
GET       /events/:eventId/edit                                                   controllers.Events.update(eventId: String)
POST      /events/:eventId/refresh                                                controllers.Events.refresh(eventId: String)
POST      /events/:eventId                                                        controllers.Events.doUpdate(eventId: String)
POST      /events/:eventId/delete                                                 controllers.Events.delete(eventId: String)
GET       /events/:eventId/report/:userId                                         controllers.Events.report(eventId: String, userId: String)

GET       /events/:eventId/exponents                                              controllers.Exponents.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /events/:eventId/exponents/create                                       controllers.Exponents.create(eventId: String)
POST      /events/:eventId/exponents                                              controllers.Exponents.doCreate(eventId: String)
GET       /events/:eventId/exponents/operations                                   controllers.Exponents.operations(eventId: String)
POST      /events/:eventId/exponents/fileImport                                   controllers.Exponents.fileImport(eventId: String)
POST      /events/:eventId/exponents/fileExport                                   controllers.Exponents.fileExport(eventId: String)
GET       /events/:eventId/exponents/:sessionId                                   controllers.Exponents.details(eventId: String, sessionId: String)
GET       /events/:eventId/exponents/:sessionId/edit                              controllers.Exponents.update(eventId: String, sessionId: String)
POST      /events/:eventId/exponents/:sessionId                                   controllers.Exponents.doUpdate(eventId: String, sessionId: String)
POST      /events/:eventId/exponents/:sessionId/delete                            controllers.Exponents.delete(eventId: String, sessionId: String)

GET       /events/:eventId/sessions                                               controllers.Sessions.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /events/:eventId/sessions/create                                        controllers.Sessions.create(eventId: String)
POST      /events/:eventId/sessions                                               controllers.Sessions.doCreate(eventId: String)
GET       /events/:eventId/sessions/operations                                    controllers.Sessions.operations(eventId: String)
POST      /events/:eventId/sessions/fileImport                                    controllers.Sessions.fileImport(eventId: String)
POST      /events/:eventId/sessions/fileExport                                    controllers.Sessions.fileExport(eventId: String)
GET       /events/:eventId/sessions/:exponentId                                   controllers.Sessions.details(eventId: String, exponentId: String)
GET       /events/:eventId/sessions/:exponentId/edit                              controllers.Sessions.update(eventId: String, exponentId: String)
POST      /events/:eventId/sessions/:exponentId                                   controllers.Sessions.doUpdate(eventId: String, exponentId: String)
POST      /events/:eventId/sessions/:exponentId/delete                            controllers.Sessions.delete(eventId: String, exponentId: String)

GET       /users                                                                  controllers.Users.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /users/create                                                           controllers.Users.create
POST      /users                                                                  controllers.Users.doCreate
GET       /users/:userId                                                          controllers.Users.details(userId: String)
GET       /users/:userId/edit                                                     controllers.Users.update(userId: String)
POST      /users/:userId                                                          controllers.Users.doUpdate(userId: String)
POST      /users/:userId/delete                                                   controllers.Users.delete(userId: String)
POST      /users/:userId/actions/:itemType/:itemId/:actionType/:actionId/delete   controllers.Users.deleteAction(userId: String, itemType: String, itemId: String, actionType: String, actionId: String)

# Api
GET       /api/v1/users/find                                                      controllers.api.Users.find(deviceId: String)
POST      /api/v1/users                                                           controllers.api.Users.create
GET       /api/v1/users/:userId                                                   controllers.api.Users.details(userId: String)
GET       /api/v1/users/:userId/actions                                           controllers.api.Users.actions(userId: String)
GET       /api/v1/users/:userId/actions/:eventId                                  controllers.api.Users.eventActions(userId: String, eventId: String)
GET       /api/v1/users/:userId/actions/:eventId/sync                             controllers.api.UserActions.syncEventActions(userId: String, eventId: String)

GET       /api/v1/events                                                          controllers.api.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/all                                                      controllers.api.Events.listAll(query: Option[String] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/:eventId                                                 controllers.api.Events.details(eventId: String)
GET       /api/v1/events/:eventId/full                                            controllers.api.Events.detailsFull(eventId: String)
POST      /api/v1/events/:eventId/subscribe                                       controllers.api.UserActions.subscribe(eventId: String)
DELETE    /api/v1/events/:eventId/subscribe                                       controllers.api.UserActions.unsubscribe(eventId: String)

GET       /api/v1/events/:eventId/sessions                                        controllers.api.Sessions.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/:eventId/sessions/all                                    controllers.api.Sessions.listAll(eventId: String)
GET       /api/v1/events/:eventId/sessions/:sessionId                             controllers.api.Sessions.details(eventId: String, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/favorites                   controllers.api.UserActions.favorite(eventId: String, itemType: String = models.SessionUI.className, sessionId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/favorites                   controllers.api.UserActions.unfavorite(eventId: String, itemType: String = models.SessionUI.className, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/dones                       controllers.api.UserActions.done(eventId: String, itemType: String = models.SessionUI.className, sessionId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/dones                       controllers.api.UserActions.undone(eventId: String, itemType: String = models.SessionUI.className, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/mood                        controllers.api.UserActions.mood(eventId: String, itemType: String = models.SessionUI.className, sessionId: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/comments                    controllers.api.UserActions.createComment(eventId: String, itemType: String = models.SessionUI.className, sessionId: String)
PUT       /api/v1/events/:eventId/sessions/:sessionId/comments/:commentId         controllers.api.UserActions.updateComment(eventId: String, itemType: String = models.SessionUI.className, sessionId: String, commentId: String)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/comments/:commentId         controllers.api.UserActions.deleteComment(eventId: String, itemType: String = models.SessionUI.className, sessionId: String, commentId: String)

GET       /api/v1/events/:eventId/exponents                                       controllers.api.Exponents.list(eventId: String, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /api/v1/events/:eventId/exponents/all                                   controllers.api.Exponents.listAll(eventId: String)
GET       /api/v1/events/:eventId/exponents/:exponentId                           controllers.api.Exponents.details(eventId: String, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/favorites                 controllers.api.UserActions.favorite(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/favorites                 controllers.api.UserActions.unfavorite(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/dones                     controllers.api.UserActions.done(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/dones                     controllers.api.UserActions.undone(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/mood                      controllers.api.UserActions.mood(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/comments                  controllers.api.UserActions.createComment(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String)
PUT       /api/v1/events/:eventId/exponents/:exponentId/comments/:commentId       controllers.api.UserActions.updateComment(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String, commentId: String)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/comments/:commentId       controllers.api.UserActions.deleteComment(eventId: String, itemType: String = models.ExponentUI.className, exponentId: String, commentId: String)

# Returns full event formated to update
GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/formated                 controllers.tools.Voxxrin.getFullEventFormated(eventId: String)
GET       /api/v1/tools/scrapers/events/rivieradev/formated                       controllers.tools.RivieraDev.getFullEventFormated()

# Other tools
GET       /api/v1/tools/scrapers/events/voxxrin                                   controllers.tools.Voxxrin.getEvents()
GET       /api/v1/tools/scrapers/events/voxxrin/:eventId                          controllers.tools.Voxxrin.getEvent(eventId: String)
GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/full                     controllers.tools.Voxxrin.getFullEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/saveInDb                   controllers.tools.Voxxrin.saveEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/saveInDb/:saloonId         controllers.tools.Voxxrin.updateEvent(eventId: String, saloonId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/day/:dayId                 controllers.tools.Voxxrin.getEventDay(eventId: String, dayId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/speakers/:speakerId        controllers.tools.Voxxrin.getEventSpeaker(eventId: String, speakerId: String)
GET       /api/v1/tools/scrapers/events/rivieradev                                controllers.tools.RivieraDev.loadRivieraDev()
GET       /api/v1/tools/scrapers/events/lanyrd/places/:place                      controllers.tools.Lanyrd.getPlaceEvents(place: String, page: Int ?= 1, maxPages: Int ?= 1)
GET       /api/v1/tools/scrapers/events/lanyrd/:year/:id                          controllers.tools.Lanyrd.getEvent(year: String, id: String)
GET       /api/v1/tools/scrapers/events/foiresetsalons/details                    controllers.tools.FoiresEtSalons.getEvent(url: String)
GET       /api/v1/tools/scrapers/events/foiresetsalons/:page                      controllers.tools.FoiresEtSalons.getEvents(page: String, format: String ?= "csv")
GET       /api/v1/tools/scrapers/events/foiresetsalons/:page/full                 controllers.tools.FoiresEtSalons.getEventsFull(page: String, offset: Int ?= 0, size: Int ?= 5, format: String ?= "csv")

GET       /api/v1/tools/scrapers/metas                                            controllers.tools.Scrapers.getMetas(url: String)

GET       /api/v1/tools/crashs                                                    controllers.tools.Crashs.getAll()
POST      /api/v1/tools/crashs                                                    controllers.tools.Crashs.receive()
POST      /api/v1/tools/crashs/batch                                              controllers.tools.Crashs.receiveBatch()
GET       /api/v1/tools/crashs/:crashId                                           controllers.tools.Crashs.get(crashId: String)
DELETE    /api/v1/tools/crashs/:crashId                                           controllers.tools.Crashs.delete(crashId: String)

POST      /api/v1/tools/events/batch                                              controllers.tools.Crashs.tmpReveiceEvents()

# Allow cross-origin for API
OPTIONS   /api/v1/*all                                                            controllers.Application.corsPreflight(all: String)

# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                                           controllers.Assets.at(path="/public", file)
