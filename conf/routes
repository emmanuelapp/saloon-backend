# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Web site
GET       /                                                                                 website.controllers.Application.index
GET       /sample                                                                           website.controllers.Application.sample
POST      /contact                                                                          common.controllers.Application.sendContactEmail

# Authentication
GET       /login                                                                            authentication.controllers.Auth.login
POST      /login                                                                            authentication.controllers.Auth.doLogin
POST      /accountRequest                                                                   authentication.controllers.Auth.doAccountRequest
GET       /createAccount/:requestId                                                         authentication.controllers.Auth.createAccount(requestId: RequestId)
POST      /createAccount/:requestId                                                         authentication.controllers.Auth.doCreateAccount(requestId: RequestId)
GET       /logout                                                                           authentication.controllers.Auth.logout

# Backend
GET       /backend/mockups                                                                  backend.controllers.Application.mockups
GET       /backend/mockups/activityWall                                                     backend.controllers.Application.mockupActivityWall
GET       /backend/mockups/exponentForm                                                     backend.controllers.Application.mockupExponentForm
GET       /backend/mockups/register1                                                        backend.controllers.Application.mockupRegister1
GET       /backend/mockups/register2                                                        backend.controllers.Application.mockupRegister2
GET       /backend/mockups/register3                                                        backend.controllers.Application.mockupRegister3
GET       /backend/mockups/scannedAttendees                                                 backend.controllers.Application.mockupScannedAttendees
GET       /backend/mockups/scannedDocuments                                                 backend.controllers.Application.mockupScannedDocuments
GET       /backend/mockups/leads                                                            backend.controllers.Application.mockupLeads

GET       /backend                                                                          backend.controllers.Application.index
GET       /backend/welcome                                                                  backend.controllers.Application.welcome

GET       /backend/profile                                                                  backend.controllers.Profile.details
GET       /backend/profile/edit                                                             backend.controllers.Profile.update
POST      /backend/profile                                                                  backend.controllers.Profile.doUpdate
POST      /backend/profile/organizations/create                                             backend.controllers.Profile.doCreateOrganization
POST      /backend/profile/organizations/requestAccess                                      backend.controllers.Profile.doOrganizationRequestAccess
GET       /backend/profile/organizations/:organizationId                                    backend.controllers.Organizations.details(organizationId: OrganizationId)
POST      /backend/profile/organizations/:organizationId/invite                             backend.controllers.Organizations.doOrganizationInvite(organizationId: OrganizationId)
GET       /backend/profile/organizations/:organizationId/edit                               backend.controllers.Organizations.update(organizationId: OrganizationId)
POST      /backend/profile/organizations/:organizationId                                    backend.controllers.Organizations.doUpdate(organizationId: OrganizationId)
GET       /backend/profile/organizations/:organizationId/delete                             backend.controllers.Organizations.delete(organizationId: OrganizationId)
POST      /backend/profile/organizations/:organizationId/delete                             backend.controllers.Organizations.doDelete(organizationId: OrganizationId)
POST      /backend/profile/organizations/:organizationId/leave                              backend.controllers.Organizations.doLeave(organizationId: OrganizationId)
POST      /backend/profile/organizations/:organizationId/ban/:userId                        backend.controllers.Organizations.doBan(organizationId: OrganizationId, userId: UserId)

GET       /backend/events                                                                   backend.controllers.Events.list
GET       /backend/events/create                                                            backend.controllers.Events.create
POST      /backend/events                                                                   backend.controllers.Events.doCreate
GET       /backend/events/:eventId                                                          backend.controllers.Events.details(eventId: EventId)
GET       /backend/events/:eventId/edit                                                     backend.controllers.Events.update(eventId: EventId)
POST      /backend/events/:eventId                                                          backend.controllers.Events.doUpdate(eventId: EventId)
POST      /backend/events/:eventId/delete                                                   backend.controllers.Events.doDelete(eventId: EventId)
POST      /backend/events/:eventId/publish                                                  backend.controllers.Events.doPublishRequest(eventId: EventId)

GET       /backend/events/:eventId/attendees                                                backend.controllers.Attendees.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /backend/events/:eventId/attendees/create                                         backend.controllers.Attendees.create(eventId: EventId)
POST      /backend/events/:eventId/attendees                                                backend.controllers.Attendees.doCreate(eventId: EventId)
POST      /backend/events/:eventId/attendees/fileExport                                     backend.controllers.Attendees.doFileExport(eventId: EventId)
GET       /backend/events/:eventId/attendees/:attendeeId                                    backend.controllers.Attendees.details(eventId: EventId, attendeeId: AttendeeId)
GET       /backend/events/:eventId/attendees/:attendeeId/edit                               backend.controllers.Attendees.update(eventId: EventId, attendeeId: AttendeeId)
POST      /backend/events/:eventId/attendees/:attendeeId                                    backend.controllers.Attendees.doUpdate(eventId: EventId, attendeeId: AttendeeId)
POST      /backend/events/:eventId/attendees/:attendeeId/delete                             backend.controllers.Attendees.doDelete(eventId: EventId, attendeeId: AttendeeId, redirectOpt: Option[String] ?= None)

GET       /backend/events/:eventId/sessions                                                 backend.controllers.Sessions.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /backend/events/:eventId/sessions/create                                          backend.controllers.Sessions.create(eventId: EventId)
POST      /backend/events/:eventId/sessions                                                 backend.controllers.Sessions.doCreate(eventId: EventId)
POST      /backend/events/:eventId/sessions/fileExport                                      backend.controllers.Sessions.doFileExport(eventId: EventId)
GET       /backend/events/:eventId/sessions/:sessionId                                      backend.controllers.Sessions.details(eventId: EventId, sessionId: SessionId)
GET       /backend/events/:eventId/sessions/:sessionId/edit                                 backend.controllers.Sessions.update(eventId: EventId, sessionId: SessionId)
POST      /backend/events/:eventId/sessions/:sessionId                                      backend.controllers.Sessions.doUpdate(eventId: EventId, sessionId: SessionId)
POST      /backend/events/:eventId/sessions/:sessionId/delete                               backend.controllers.Sessions.doDelete(eventId: EventId, sessionId: SessionId)
GET       /backend/events/:eventId/sessions/:sessionId/speakers/create                      backend.controllers.AttendeeTeam.create(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
POST      /backend/events/:eventId/sessions/:sessionId/speakers/createInvite                backend.controllers.AttendeeTeam.doCreateInvite(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
POST      /backend/events/:eventId/sessions/:sessionId/speakers/createFull                  backend.controllers.AttendeeTeam.doCreateFull(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
POST      /backend/events/:eventId/sessions/:sessionId/speakers/join                        backend.controllers.AttendeeTeam.doJoin(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
GET       /backend/events/:eventId/sessions/:sessionId/speakers/:attendeeId                 backend.controllers.AttendeeTeam.details(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId, attendeeId: AttendeeId)
GET       /backend/events/:eventId/sessions/:sessionId/speakers/:attendeeId/edit            backend.controllers.AttendeeTeam.update(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId, attendeeId: AttendeeId)
POST      /backend/events/:eventId/sessions/:sessionId/speakers/:attendeeId                 backend.controllers.AttendeeTeam.doUpdate(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId, attendeeId: AttendeeId)
POST      /backend/events/:eventId/sessions/:sessionId/speakers/:attendeeId/leave           backend.controllers.AttendeeTeam.doLeave(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId, attendeeId: AttendeeId)

GET       /backend/events/:eventId/exponents                                                backend.controllers.Exponents.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /backend/events/:eventId/exponents/create                                         backend.controllers.Exponents.create(eventId: EventId)
POST      /backend/events/:eventId/exponents                                                backend.controllers.Exponents.doCreate(eventId: EventId)
POST      /backend/events/:eventId/exponents/fileExport                                     backend.controllers.Exponents.doFileExport(eventId: EventId)
GET       /backend/events/:eventId/exponents/:exponentId                                    backend.controllers.Exponents.details(eventId: EventId, exponentId: ExponentId)
GET       /backend/events/:eventId/exponents/:exponentId/edit                               backend.controllers.Exponents.update(eventId: EventId, exponentId: ExponentId)
POST      /backend/events/:eventId/exponents/:exponentId                                    backend.controllers.Exponents.doUpdate(eventId: EventId, exponentId: ExponentId)
POST      /backend/events/:eventId/exponents/:exponentId/delete                             backend.controllers.Exponents.doDelete(eventId: EventId, exponentId: ExponentId)
GET       /backend/events/:eventId/exponents/:exponentId/team/create                        backend.controllers.AttendeeTeam.create(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
POST      /backend/events/:eventId/exponents/:exponentId/team/createInvite                  backend.controllers.AttendeeTeam.doCreateInvite(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
POST      /backend/events/:eventId/exponents/:exponentId/team/createFull                    backend.controllers.AttendeeTeam.doCreateFull(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
POST      /backend/events/:eventId/exponents/:exponentId/team/join                          backend.controllers.AttendeeTeam.doJoin(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
GET       /backend/events/:eventId/exponents/:exponentId/team/:attendeeId                   backend.controllers.AttendeeTeam.details(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId, attendeeId: AttendeeId)
GET       /backend/events/:eventId/exponents/:exponentId/team/:attendeeId/edit              backend.controllers.AttendeeTeam.update(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId, attendeeId: AttendeeId)
POST      /backend/events/:eventId/exponents/:exponentId/team/:attendeeId                   backend.controllers.AttendeeTeam.doUpdate(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId, attendeeId: AttendeeId)
POST      /backend/events/:eventId/exponents/:exponentId/team/:attendeeId/leave             backend.controllers.AttendeeTeam.doLeave(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId, attendeeId: AttendeeId)

GET       /backend/events/:eventId/ticketing                                                backend.controllers.Ticketing.details(eventId: EventId)
GET       /backend/events/:eventId/ticketing/configure                                      backend.controllers.Ticketing.configure(eventId: EventId)
POST      /backend/events/:eventId/ticketing/configure                                      backend.controllers.Ticketing.doConfigure(eventId: EventId)
POST      /backend/events/:eventId/ticketing/activate                                       backend.controllers.Ticketing.doActivate(eventId: EventId, activated: Boolean = true)
POST      /backend/events/:eventId/ticketing/desactivate                                    backend.controllers.Ticketing.doActivate(eventId: EventId, activated: Boolean = false)
GET       /events/:eventId/register                                                         backend.controllers.Ticketing.register(eventId: EventId)
POST      /events/:eventId/register                                                         backend.controllers.Ticketing.doRegister(eventId: EventId)

GET       /backend/requests/:requestId                                                      backend.controllers.Requests.details(requestId: RequestId)
POST      /backend/requests/:requestId/reminder                                             backend.controllers.Requests.doReminder(requestId: RequestId)
POST      /backend/requests/:requestId/cancel                                               backend.controllers.Requests.doCancel(requestId: RequestId)
GET       /backend/requests/:requestId/accept                                               backend.controllers.Requests.doAccept(requestId: RequestId, redirection: Option[String] ?= None)
GET       /backend/requests/:requestId/reject                                               backend.controllers.Requests.doReject(requestId: RequestId, redirection: Option[String] ?= None)

GET       /backend/sample                                                                   backend.controllers.Sample.index
GET       /backend/sample/:pageName                                                         backend.controllers.Sample.page(pageName: String)

# Admin
GET       /admin                                                                            admin.controllers.Application.index
GET       /admin/sample                                                                     admin.controllers.Application.sample
GET       /admin/migrate                                                                    admin.controllers.Application.migrate

GET       /admin/events                                                                     admin.controllers.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/create                                                              admin.controllers.Events.create
POST      /admin/events                                                                     admin.controllers.Events.doCreate
POST      /admin/events/fromUrl                                                             admin.controllers.Events.doCreateFromUrl
GET       /admin/events/:eventId                                                            admin.controllers.Events.details(eventId: EventId)
GET       /admin/events/:eventId/operations                                                 admin.controllers.Events.operations(eventId: EventId)
POST      /admin/events/:eventId/urlImport                                                  admin.controllers.Events.urlImport(eventId: EventId)
POST      /admin/events/:eventId/stats                                                      admin.controllers.Events.stats(eventId: EventId)
GET       /admin/events/:eventId/edit                                                       admin.controllers.Events.update(eventId: EventId)
POST      /admin/events/:eventId                                                            admin.controllers.Events.doUpdate(eventId: EventId)
GET       /admin/events/:eventId/refresh                                                    admin.controllers.Events.refresh(eventId: EventId)
POST      /admin/events/:eventId/refresh                                                    admin.controllers.Events.doRefresh(eventId: EventId)
POST      /admin/events/:eventId/delete                                                     admin.controllers.Events.delete(eventId: EventId)
GET       /admin/events/:eventId/reports                                                    admin.controllers.Events.reportsPreview(eventId: EventId)
GET       /admin/events/:eventId/reports/:deviceId                                          admin.controllers.Events.report(eventId: EventId, deviceId: DeviceId)
POST      /admin/events/:eventId/reports                                                    admin.controllers.Events.sendReports(eventId: EventId)
POST      /admin/events/:eventId/reports/:deviceId                                          admin.controllers.Events.sendReport(eventId: EventId, deviceId: DeviceId)

GET       /admin/events/:eventId/attendees                                                  admin.controllers.Attendees.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/:eventId/attendees/create                                           admin.controllers.Attendees.create(eventId: EventId)
POST      /admin/events/:eventId/attendees                                                  admin.controllers.Attendees.doCreate(eventId: EventId)
#POST      /admin/events/:eventId/attendees/fileImport                                       admin.controllers.Attendees.fileImport(eventId: EventId)
#POST      /admin/events/:eventId/attendees/fileExport                                       admin.controllers.Attendees.fileExport(eventId: EventId)
GET       /admin/events/:eventId/attendees/:attendeeId                                      admin.controllers.Attendees.details(eventId: EventId, attendeeId: AttendeeId)
GET       /admin/events/:eventId/attendees/:attendeeId/edit                                 admin.controllers.Attendees.update(eventId: EventId, attendeeId: AttendeeId)
POST      /admin/events/:eventId/attendees/:attendeeId                                      admin.controllers.Attendees.doUpdate(eventId: EventId, attendeeId: AttendeeId)
POST      /admin/events/:eventId/attendees/:attendeeId/delete                               admin.controllers.Attendees.delete(eventId: EventId, attendeeId: AttendeeId)

GET       /admin/events/:eventId/sessions                                                   admin.controllers.Sessions.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/:eventId/sessions/create                                            admin.controllers.Sessions.create(eventId: EventId)
POST      /admin/events/:eventId/sessions                                                   admin.controllers.Sessions.doCreate(eventId: EventId)
#POST      /admin/events/:eventId/sessions/fileImport                                        admin.controllers.Sessions.fileImport(eventId: EventId)
#POST      /admin/events/:eventId/sessions/fileExport                                        admin.controllers.Sessions.fileExport(eventId: EventId)
GET       /admin/events/:eventId/sessions/:sessionId                                        admin.controllers.Sessions.details(eventId: EventId, sessionId: SessionId)
GET       /admin/events/:eventId/sessions/:sessionId/edit                                   admin.controllers.Sessions.update(eventId: EventId, sessionId: SessionId)
POST      /admin/events/:eventId/sessions/:sessionId                                        admin.controllers.Sessions.doUpdate(eventId: EventId, sessionId: SessionId)
POST      /admin/events/:eventId/sessions/:sessionId/delete                                 admin.controllers.Sessions.delete(eventId: EventId, sessionId: SessionId)

GET       /admin/events/:eventId/exponents                                                  admin.controllers.Exponents.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/events/:eventId/exponents/create                                           admin.controllers.Exponents.create(eventId: EventId)
POST      /admin/events/:eventId/exponents                                                  admin.controllers.Exponents.doCreate(eventId: EventId)
#POST      /admin/events/:eventId/exponents/fileImport                                       admin.controllers.Exponents.fileImport(eventId: EventId)
#POST      /admin/events/:eventId/exponents/fileExport                                       admin.controllers.Exponents.fileExport(eventId: EventId)
GET       /admin/events/:eventId/exponents/:exponentId                                      admin.controllers.Exponents.details(eventId: EventId, exponentId: ExponentId)
GET       /admin/events/:eventId/exponents/:exponentId/edit                                 admin.controllers.Exponents.update(eventId: EventId, exponentId: ExponentId)
POST      /admin/events/:eventId/exponents/:exponentId                                      admin.controllers.Exponents.doUpdate(eventId: EventId, exponentId: ExponentId)
POST      /admin/events/:eventId/exponents/:exponentId/delete                               admin.controllers.Exponents.delete(eventId: EventId, exponentId: ExponentId)

GET       /admin/organizations                                                              admin.controllers.Organizations.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/organizations/create                                                       admin.controllers.Organizations.create
POST      /admin/organizations                                                              admin.controllers.Organizations.doCreate
GET       /admin/organizations/:organizationId                                              admin.controllers.Organizations.details(organizationId: OrganizationId)
GET       /admin/organizations/:organizationId/edit                                         admin.controllers.Organizations.update(organizationId: OrganizationId)
POST      /admin/organizations/:organizationId                                              admin.controllers.Organizations.doUpdate(organizationId: OrganizationId)
POST      /admin/organizations/:organizationId/delete                                       admin.controllers.Organizations.delete(organizationId: OrganizationId)

GET       /admin/users                                                                      admin.controllers.Users.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/users/create                                                               admin.controllers.Users.create
POST      /admin/users                                                                      admin.controllers.Users.doCreate
GET       /admin/users/:userId                                                              admin.controllers.Users.details(userId: UserId)
GET       /admin/users/:userId/edit                                                         admin.controllers.Users.update(userId: UserId)
POST      /admin/users/:userId                                                              admin.controllers.Users.doUpdate(userId: UserId)
POST      /admin/users/:userId/delete                                                       admin.controllers.Users.delete(userId: UserId)

GET       /admin/devices                                                                    admin.controllers.Devices.list(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[String] ?= None)
GET       /admin/devices/create                                                             admin.controllers.Devices.create
POST      /admin/devices                                                                    admin.controllers.Devices.doCreate
GET       /admin/devices/:deviceId                                                          admin.controllers.Devices.details(deviceId: DeviceId)
GET       /admin/devices/:deviceId/edit                                                     admin.controllers.Devices.update(deviceId: DeviceId)
POST      /admin/devices/:deviceId                                                          admin.controllers.Devices.doUpdate(deviceId: DeviceId)
POST      /admin/devices/:deviceId/delete                                                   admin.controllers.Devices.delete(deviceId: DeviceId)
POST      /admin/devices/:deviceId/actions/:itemType/:itemId/:actionType/:actionId/delete   admin.controllers.Devices.deleteAction(deviceId: DeviceId, itemType: ItemType, itemId: GenericId, actionType: String, actionId: UserActionId)

GET       /admin/crashs                                                                     admin.controllers.Crashs.list
GET       /admin/crashs/:crashId                                                            admin.controllers.Crashs.details(crashId: String)
POST      /admin/crashs/:crashId/solved                                                     admin.controllers.Crashs.solved(crashId: String)

# Api
GET       /api/v1/users/find                                                                api.controllers.Devices.find(deviceUuid: String)
POST      /api/v1/users                                                                     api.controllers.Devices.create
GET       /api/v1/users/:deviceId                                                           api.controllers.Devices.details(deviceId: DeviceId)
GET       /api/v1/users/:deviceId/actions                                                   api.controllers.Devices.actions(deviceId: DeviceId)
GET       /api/v1/users/:deviceId/actions/:eventId                                          api.controllers.Devices.eventActions(deviceId: DeviceId, eventId: EventId)
POST      /api/v1/users/:deviceId/actions/:eventId/sync                                     api.controllers.UserActions.syncEventActions(deviceId: DeviceId, eventId: EventId)

GET       /api/:version/events                                                              api.controllers.Events.list(query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/all                                                          api.controllers.Events.listAll(query: Option[String] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/:eventId                                                     api.controllers.Events.details(eventId: EventId, version: String)
GET       /api/:version/events/:eventId/full                                                api.controllers.Events.detailsFull(eventId: EventId, version: String)
POST      /api/v1/events/:eventId/subscribe                                                 api.controllers.UserActions.subscribe(eventId: EventId)
DELETE    /api/v1/events/:eventId/subscribe                                                 api.controllers.UserActions.unsubscribe(eventId: EventId)

GET       /api/:version/events/:eventId/sessions                                            api.controllers.Sessions.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/:eventId/sessions/all                                        api.controllers.Sessions.listAll(eventId: EventId, version: String)
GET       /api/:version/events/:eventId/sessions/:sessionId                                 api.controllers.Sessions.details(eventId: EventId, sessionId: SessionId, version: String)
POST      /api/v1/events/:eventId/sessions/:sessionId/favorites                             api.controllers.UserActions.favorite(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/favorites                             api.controllers.UserActions.unfavorite(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
POST      /api/v1/events/:eventId/sessions/:sessionId/dones                                 api.controllers.UserActions.done(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/dones                                 api.controllers.UserActions.undone(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
POST      /api/v1/events/:eventId/sessions/:sessionId/mood                                  api.controllers.UserActions.mood(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/mood                                  api.controllers.UserActions.deleteMood(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
POST      /api/v1/events/:eventId/sessions/:sessionId/comments                              api.controllers.UserActions.createComment(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId)
PUT       /api/v1/events/:eventId/sessions/:sessionId/comments/:commentId                   api.controllers.UserActions.updateComment(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId, commentId: UserActionId)
DELETE    /api/v1/events/:eventId/sessions/:sessionId/comments/:commentId                   api.controllers.UserActions.deleteComment(eventId: EventId, itemType: ItemType = ItemType.sessions, sessionId: GenericId, commentId: UserActionId)

GET       /api/:version/events/:eventId/exponents                                           api.controllers.Exponents.list(eventId: EventId, query: Option[String] ?= None, page: Option[Int] ?= None, sort: Option[String] ?= None, version: String)
GET       /api/:version/events/:eventId/exponents/all                                       api.controllers.Exponents.listAll(eventId: EventId, version: String)
GET       /api/:version/events/:eventId/exponents/:exponentId                               api.controllers.Exponents.details(eventId: EventId, exponentId: ExponentId, version: String)
POST      /api/v1/events/:eventId/exponents/:exponentId/favorites                           api.controllers.UserActions.favorite(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/favorites                           api.controllers.UserActions.unfavorite(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
POST      /api/v1/events/:eventId/exponents/:exponentId/dones                               api.controllers.UserActions.done(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/dones                               api.controllers.UserActions.undone(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
POST      /api/v1/events/:eventId/exponents/:exponentId/mood                                api.controllers.UserActions.mood(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/mood                                api.controllers.UserActions.deleteMood(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
POST      /api/v1/events/:eventId/exponents/:exponentId/comments                            api.controllers.UserActions.createComment(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId)
PUT       /api/v1/events/:eventId/exponents/:exponentId/comments/:commentId                 api.controllers.UserActions.updateComment(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId, commentId: UserActionId)
DELETE    /api/v1/events/:eventId/exponents/:exponentId/comments/:commentId                 api.controllers.UserActions.deleteComment(eventId: EventId, itemType: ItemType = ItemType.exponents, exponentId: GenericId, commentId: UserActionId)

GET       /api/v1/tools/crashs                                                              api.controllers.Crashs.getAll()
POST      /api/v1/tools/crashs                                                              api.controllers.Crashs.receive()
POST      /api/v1/tools/crashs/batch                                                        api.controllers.Crashs.receiveBatch()
GET       /api/v1/tools/crashs/:crashId                                                     api.controllers.Crashs.get(crashId: String)
DELETE    /api/v1/tools/crashs/:crashId                                                     api.controllers.Crashs.delete(crashId: String)

# Tools (mainly scrapers), should be moved to a separate app
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/formated                           tools.controllers.Voxxrin.getFullEventFormated(eventId: String)
#GET       /api/v1/tools/scrapers/events/rivieradev/formated                                 tools.controllers.RivieraDev.getFullEventFormated()
#GET       /api/v1/tools/scrapers/events/voxxrin                                             tools.controllers.Voxxrin.getEvents()
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId                                    tools.controllers.Voxxrin.getEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/full                               tools.controllers.Voxxrin.getFullEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/saveInDb                           tools.controllers.Voxxrin.saveEvent(eventId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/saveInDb/:saloonId                 tools.controllers.Voxxrin.updateEvent(eventId: String, saloonId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/day/:dayId                         tools.controllers.Voxxrin.getEventDay(eventId: String, dayId: String)
#GET       /api/v1/tools/scrapers/events/voxxrin/:eventId/speakers/:speakerId                tools.controllers.Voxxrin.getEventSpeaker(eventId: String, speakerId: String)
#GET       /api/v1/tools/scrapers/events/rivieradev                                          tools.controllers.RivieraDev.loadRivieraDev()
GET       /api/v1/tools/scrapers/events/lanyrd/places/:place                                tools.controllers.Lanyrd.getPlaceEvents(place: String, page: Int ?= 1, maxPages: Int ?= 1)
GET       /api/v1/tools/scrapers/events/lanyrd/:year/:id                                    tools.controllers.Lanyrd.getEvent(year: String, id: String)
GET       /api/v1/tools/scrapers/events/foiresetsalons/details                              tools.controllers.FoiresEtSalons.getEvent(url: String)
GET       /api/v1/tools/scrapers/events/foiresetsalons/:page                                tools.controllers.FoiresEtSalons.getEvents(page: String, format: String ?= "csv")
GET       /api/v1/tools/scrapers/events/foiresetsalons/:page/full                           tools.controllers.FoiresEtSalons.getEventsFull(page: String, offset: Int ?= 0, size: Int ?= 5, format: String ?= "csv")
GET       /api/v1/tools/scrapers/events/innorobo/exhibitors                                 tools.controllers.Innorobo.getExibitors()
GET       /api/v1/tools/scrapers/events/innorobo/exhibitors/full                            tools.controllers.Innorobo.getFullExibitors(offset: Int ?= 0, limit: Int ?= 5, format: String ?= "json")
GET       /api/v1/tools/scrapers/events/innorobo/exhibitors/:exhibitorId                    tools.controllers.Innorobo.getExibitor(exhibitorId: String)
GET       /api/v1/tools/scrapers/metas                                                      tools.controllers.Scrapers.getMetas(url: String)

# Allow cross-origin for API
OPTIONS   /api/v1/*all                                                                      common.controllers.Application.corsPreflight(all: String)

# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                                                     controllers.Assets.at(path="/public", file)
